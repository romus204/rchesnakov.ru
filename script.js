// === –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ===
const {
    output,
    'cmd-input': input,
    'close-btn': closeBtn,
    'resume-modal': resumeModal,
    'close-resume': closeResumeBtn,
    'lang-en': langEnBtn,
    'lang-ru': langRuBtn,
    'help-trigger': helpTrigger,
    'help-modal': helpModal,
    'help-close': helpClose,
    'help-title': helpTitle,
    'help-text': helpText,
    'help-close-btn': helpCloseBtn,
    'close-resume-header': closeResumeHeader,
    'close-sound': closeSound,
    'resume-body': resumeBody,
    'resume-title': resumeTitle
} = Object.fromEntries(
    Array.from(document.querySelectorAll('[id]')).map(el => [el.id, el])
);

let currentLang = 'ru';

/// === –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ ===
const helpTexts = {
    en: {
        title: "Quick Guide",
        body: `Type commands like:\n‚Üí <code>help</code> ‚Äî show all commands\n‚Üí <code>about</code> ‚Äî about me\n‚Üí <code>skills</code> ‚Äî technologies I use\n‚Üí <code>contact</code> ‚Äî how to reach me\n‚Üí <code>watch_all</code> ‚Äî show everything\n\nPress <kbd>Enter</kbd> to run a command.\n\nClick <span style="color:#ff5f57">‚óè</span> to view my full resume.`
    },
    ru: {
        title: "C–ø—Ä–∞–≤–∫–∞",
        body: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Üí <code>help</code> ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n‚Üí <code>about</code> ‚Äî –æ–±–æ –º–Ω–µ\n‚Üí <code>skills</code> ‚Äî –Ω–∞–≤—ã–∫–∏\n‚Üí <code>contact</code> ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã\n‚Üí <code>watch_all</code> ‚Äî –≤—Å—ë —Å—Ä–∞–∑—É\n\n–ù–∞–∂–º–∏—Ç–µ <kbd>Enter</kbd> –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n–ù–∞–∂–º–∏—Ç–µ <span style="color:#ff5f57">‚óè</span> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ.`
    }
};
// ==/ === –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ ===
const texts = {
    en: {
        welcome: "Welcome!\nType 'help' to see available commands or close this window for get resume.",
        help: "Available commands:\n  help ‚Äî show this help\n  watch_all ‚Äî display full portfolio\n  about ‚Äî about me\n  skills ‚Äî my skills\n  contact ‚Äî how to reach me",
        watch_all: "‚Äî About Me ‚Äî\nHi! I'm Roman Chesnakov, a backend engineer with 6+ years in IT.\n\n‚Äî Skills ‚Äî\nGo, Lua, Python, Bash, JS, PostgreSQL, ClickHouse, Redis, NATS, RabbitMQ, Docker, Kubernetes\n\n‚Äî Interests ‚Äî\nNeovim, Cybersecurity, Microcontrollers, AI, Self-hosted infra\n\n‚Äî Contact ‚Äî\nüìß romus204@gmail.com\nüì± t.me/just_romarik\nüíº linkedin.com/in/just-romarik\nüêô github.com/romus204",
        about: "Backend engineer. 6+ years in IT. I love building fast, reliable, and understandable systems. Interested in high-load tasks, integrations, and optimization. Skilled in creating fault-tolerant and scalable solutions. Deep infrastructure knowledge helps me see the big picture ‚Äî not just the code. Constantly apply security practices from pentesting my own network and participating in related events.",
        skills: "Languages: Go, Lua, Python, Bash, JavaScript\nDatabases: PostgreSQL, ClickHouse, Redis\nBrokers: NATS, RabbitMQ\nInfra: Docker, Kubernetes\nTools: Neovim, Git, Make, CI/CD",
        contact: "üì¨ Email: romus204@gmail.com\nüì± Telegram: @just_romarik\nüíº LinkedIn: linkedin.com/in/just-romarik\nüêô GitHub: github.com/romus204",
        command_not_found: "Command not found. Type 'help' for assistance."
    },
    ru: {
        welcome: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–∑—é–º–µ.",
        help: "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n  help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n  watch_all ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n  about ‚Äî –æ–±–æ –º–Ω–µ\n  skills ‚Äî –º–æ–∏ –Ω–∞–≤—ã–∫–∏\n  contact ‚Äî –∫–∞–∫ —Å–æ –º–Ω–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è",
        watch_all: "‚Äî –û–±–æ –º–Ω–µ ‚Äî\n–ü—Ä–∏–≤–µ—Ç! –Ø –†–æ–º–∞–Ω –ß–µ—Å–Ω–∞–∫–æ–≤, backend-–∏–Ω–∂–µ–Ω–µ—Ä. 6+ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ IT.\n\n‚Äî –ù–∞–≤—ã–∫–∏ ‚Äî\nGo, Lua, Python, Bash, JS, PostgreSQL, ClickHouse, Redis, NATS, RabbitMQ, Docker, Kubernetes\n\n‚Äî –ò–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî\nNeovim, –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –ú–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã, –ò–ò, Self-hosted\n\n‚Äî –ö–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî\nüìß romus204@gmail.com\nüì± t.me/just_romarik\nüíº linkedin.com/in/just-romarik\nüêô github.com/romus204",
        about: "Backend-–∏–Ω–∂–µ–Ω–µ—Ä. 6+ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ IT. –õ—é–±–ª—é –¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ, –Ω–∞–¥—ë–∂–Ω—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. –ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∑–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π. –£–º–µ—é —Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è. –•–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—é —Ä–∞–±–æ—Ç—É –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–¥. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —Ö–æ–¥–µ –ø–µ–Ω—Ç–µ—Å—Ç–æ–≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.",
        skills: "–Ø–∑—ã–∫–∏: Go, Lua, Python, Bash, JavaScript\n–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: PostgreSQL, ClickHouse, Redis\n–ë—Ä–æ–∫–µ—Ä—ã: NATS, RabbitMQ\n–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: Docker, Kubernetes\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Neovim, Git, Make, CI/CD",
        contact: "üì¨ Email: romus204@gmail.com\nüì± Telegram: @just_romarik\nüíº LinkedIn: linkedin.com/in/just-romarik\nüêô GitHub: github.com/romus204",
        command_not_found: "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è –ø–æ–º–æ—â–∏."
    }
};

// === –†–µ–∑—é–º–µ –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö (–¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞) ===
const resumeContent = {
    en: `
        <h2>Hi! I'm Roman Chesnakov</h2>
        <p>Backend engineer. 6+ years in IT.</p>
        <p>I love building fast, reliable, and understandable systems. I'm drawn to high-load tasks, integrations, and optimization. I know how to design fault-tolerant and scalable solutions. My deep infrastructure knowledge helps me see the whole system ‚Äî not just the code. I constantly apply security practices gained from pentesting my own network and participating in related events.</p>

        <h3>üõ† Current Tech Stack</h3>
        <ul>
            <li><strong>Programming Languages</strong>: Go (Golang), Lua, Python, Bash, JavaScript</li>
            <li><strong>Databases</strong>: PostgreSQL, ClickHouse, Redis</li>
            <li><strong>Message Brokers</strong>: NATS, RabbitMQ</li>
            <li><strong>Containerization</strong>: Docker, Kubernetes (k8s)</li>
        </ul>

        <h3>üöÄ Interests</h3>
        <ul>
            <li><strong>Neovim</strong> ‚Äî I actively use and customize it for efficient development.</li>
            <li><strong>Cybersecurity</strong> ‚Äî I‚Äôm passionate about it and apply best practices.</li>
            <li><strong>Microcontrollers & SBCs</strong> ‚Äî Raspberry Pi, Orange Pi, Arduino projects in my free time.</li>
            <li><strong>AI</strong> ‚Äî I build local AI tools to assist with daily tasks.</li>
            <li><strong>Self-hosted</strong> ‚Äî I‚Äôm a strong advocate. I run a small home infrastructure and am currently building a cluster based on SBCs.</li>
        </ul>

        <h3>üì´ How to Reach Me</h3>
        <ul>
            <li>Email: <a href="mailto:romus204@gmail.com">romus204@gmail.com</a><br></li>
            <li>Telegram: <a href="https://t.me/just_romarik" target="_blank">@just_romarik</a><br></li>
            <li>LinkedIn: <a href="https://linkedin.com/in/just-romarik" target="_blank">Roman Chesnakov</a><br></li>
            <li>GitHub: <a href="https://github.com/romus204" target="_blank">romus204</a></li>
        </ul>
    `,
    ru: `
        <h2>–ü—Ä–∏–≤–µ—Ç! –Ø –†–æ–º–∞–Ω –ß–µ—Å–Ω–∞–∫–æ–≤</h2>
        <p>Backend-–∏–Ω–∂–µ–Ω–µ—Ä. 6+ –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ IT.</p>
        <p>–õ—é–±–ª—é –¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ, –Ω–∞–¥—ë–∂–Ω—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. –ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∑–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π. –£–º–µ—é —Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è. –•–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—é —Ä–∞–±–æ—Ç—É –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∏—Å—Ç–µ–º—É —Ü–µ–ª–∏–∫–æ–º, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–¥. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —Ö–æ–¥–µ –ø–µ–Ω—Ç–µ—Å—Ç–æ–≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–µ—Ç–∏ –∏ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.</p>

        <h3>üõ† –¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</h3>
        <ul>
            <li><strong>–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</strong>: Go (Golang), Lua, Python, Bash, JavaScript</li>
            <li><strong>–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</strong>: PostgreSQL, ClickHouse, Redis</li>
            <li><strong>–ë—Ä–æ–∫–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π</strong>: NATS, RabbitMQ</li>
            <li><strong>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è</strong>: Docker, Kubernetes (k8s)</li>
        </ul>

        <h3>üöÄ –ò–Ω—Ç–µ—Ä–µ—Å—ã</h3>
        <ul>
            <li><strong>Neovim</strong> ‚Äî –ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É—é –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.</li>
            <li><strong>–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</strong> ‚Äî –£–≤–ª–µ–∫–∞—é—Å—å –∏ –ø—Ä–∏–º–µ–Ω—è—é –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.</li>
            <li><strong>–ú–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ SBC</strong> ‚Äî –ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ Raspberry Pi, Orange Pi, Arduino –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è.</li>
            <li><strong>–ò–ò</strong> ‚Äî –°–æ–∑–¥–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–µ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.</li>
            <li><strong>Self-hosted</strong> ‚Äî –Ø–≤–ª—è—é—Å—å —Å—Ç–æ—Ä–æ–Ω–Ω–∏–∫–æ–º self-hosted —Ä–µ—à–µ–Ω–∏–π. –í–ª–∞–¥–µ—é –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–º–∞—à–Ω–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –ù–∞—Ö–æ–∂—É—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –±–∞–∑–µ SBC.</li>
        </ul>

        <h3>üì´ –ö–∞–∫ —Å–æ –º–Ω–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è</h3>
        <ul>
            <li>Email: <a href="mailto:romus204@gmail.com">romus204@gmail.com</a><br></li>
            <li>Telegram: <a href="https://t.me/just_romarik" target="_blank">@just_romarik</a><br></li>
            <li>LinkedIn: <a href="https://linkedin.com/in/just-romarik" target="_blank">Roman Chesnakov</a><br></li>
            <li>GitHub: <a href="https://github.com/romus204" target="_blank">romus204</a></li>
        </ul>
    `
};

// === –ö–æ–º–∞–Ω–¥—ã ===
const COMMANDS = ['help', 'watch_all', 'about', 'skills', 'contact', 'close'];

// === –ü–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π ===
function typeText(text, callback) {
    const lines = text.split('\n');
    let lineIndex = 0;
    const terminal = document.querySelector('.terminal');

    function typeLine() {
        if (lineIndex >= lines.length) {
            callback?.();
            return;
        }

        const p = document.createElement('p');
        output.appendChild(p);

        let charIndex = 0;
        const typeChar = () => {
            if (charIndex < lines[lineIndex].length) {
                p.textContent += lines[lineIndex][charIndex];
                charIndex++;

                requestAnimationFrame(() => {
                    terminal.scrollTop = terminal.scrollHeight;
                });

                setTimeout(typeChar, 5);
            } else {
                lineIndex++;
                setTimeout(typeLine, 50);
            }
        };

        typeChar();
    }

    typeLine();
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã ===
function handleCommand(cmd) {
    const command = cmd.trim().toLowerCase();
    if (command == 'close') {
        toggleResumeModal(true)
        input.value = '';
        input.focus();

        return
    }
    const response = texts[currentLang][command] || texts[currentLang].command_not_found;

    typeText(`> ${cmd}\n${response}`, () => {
        input.value = '';
        input.focus();
    });
}

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–º ===
function switchLanguage(lang) {
    currentLang = lang;
    langEnBtn.classList.toggle('active', lang === 'en');
    langRuBtn.classList.toggle('active', lang === 'ru');
    output.innerHTML = '';
    typeText(texts[lang].welcome);
}

// === –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ ===
function toggleModal(modalId, show) {
    const modal = document.getElementById(modalId);
    if (show) {
        if (modalId === 'resume-modal') {
            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∑—é–º–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
            resumeBody.innerHTML = resumeContent[currentLang];
            resumeTitle.textContent = currentLang === 'en' ? "Resume" : "–†–µ–∑—é–º–µ";
        }
        modal.classList.add('active');
    } else {
        modal.classList.remove('active');
        try { closeSound.play(); } catch (e) { /* ignore */ }
        input?.focus();
    }
}

function toggleResumeModal(show) {
    toggleModal('resume-modal', show);
}

function toggleHelpModal(show) {
    if (show) {
        helpTitle.textContent = helpTexts[currentLang].title;
        helpText.innerHTML = helpTexts[currentLang].body.replace(/\n/g, '<br>');
    }
    toggleModal('help-modal', show);
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π ===
function initEventListeners() {
    input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && input.value) {
            handleCommand(input.value);
        }
    });

    // –†–µ–∑—é–º–µ
    closeBtn.addEventListener('click', () => toggleResumeModal(true));
    // closeResumeBtn.addEventListener('click', () => toggleResumeModal(false));
    closeResumeHeader.addEventListener('click', () => toggleResumeModal(false));

    // –°–ø—Ä–∞–≤–∫–∞
    helpTrigger.addEventListener('click', () => toggleHelpModal(true));
    helpClose.addEventListener('click', () => toggleHelpModal(false));
    // helpCloseBtn.addEventListener('click', () => toggleHelpModal(false));

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
    helpModal.addEventListener('click', (e) => {
        if (e.target === helpModal) toggleHelpModal(false);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—é–º–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
    resumeModal.addEventListener('click', (e) => {
        if (e.target === resumeModal) toggleResumeModal(false);
    });

    // –§–æ–∫—É—Å –≤—Å–µ–≥–¥–∞ –Ω–∞ –∏–Ω–ø—É—Ç–µ
    document.addEventListener('click', (e) => {
        if (!input.contains(e.target) && e.target !== input) {
            input.focus();
        }
    });

    // –Ø–∑—ã–∫
    langEnBtn.addEventListener('click', () => switchLanguage('en'));
    langRuBtn.addEventListener('click', () => switchLanguage('ru'));
}

// === –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ===
window.addEventListener('DOMContentLoaded', () => {
    typeText(texts[currentLang].welcome, () => input.focus());
    initEventListeners();
    langRuBtn.classList.add('active');
});
